#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mpeg4Tagging
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ISO base media file format")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBoxDefinition(BoxDefinition instance);
    partial void UpdateBoxDefinition(BoxDefinition instance);
    partial void DeleteBoxDefinition(BoxDefinition instance);
    partial void InsertBox(Box instance);
    partial void UpdateBox(Box instance);
    partial void DeleteBox(Box instance);
    partial void InsertBoxUuid(BoxUuid instance);
    partial void UpdateBoxUuid(BoxUuid instance);
    partial void DeleteBoxUuid(BoxUuid instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Mpeg4Tagging.Properties.Settings.Default.ISO_base_media_file_formatConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BoxDefinition> BoxDefinitions
		{
			get
			{
				return this.GetTable<BoxDefinition>();
			}
		}
		
		public System.Data.Linq.Table<Box> Boxes
		{
			get
			{
				return this.GetTable<Box>();
			}
		}
		
		public System.Data.Linq.Table<BoxUuid> BoxUuids
		{
			get
			{
				return this.GetTable<BoxUuid>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CreateBox")]
		public ISingleResult<Box> CreateBox()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Box>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Box Definitions]")]
	public partial class BoxDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _InternalBoxUuid;
		
		private System.Nullable<System.Guid> _Conatiner;
		
		private bool _Mandatory;
		
		private System.Nullable<byte> _QuantityMinimum;
		
		private System.Nullable<byte> _QuantityMaximum;
		
		private EntityRef<Box> _Box;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInternalBoxUuidChanging(System.Guid value);
    partial void OnInternalBoxUuidChanged();
    partial void OnConatinerChanging(System.Nullable<System.Guid> value);
    partial void OnConatinerChanged();
    partial void OnMandatoryChanging(bool value);
    partial void OnMandatoryChanged();
    partial void OnQuantityMinimumChanging(System.Nullable<byte> value);
    partial void OnQuantityMinimumChanged();
    partial void OnQuantityMaximumChanging(System.Nullable<byte> value);
    partial void OnQuantityMaximumChanged();
    #endregion
		
		public BoxDefinition()
		{
			this._Box = default(EntityRef<Box>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Internal Box UUID]", Storage="_InternalBoxUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InternalBoxUuid
		{
			get
			{
				return this._InternalBoxUuid;
			}
			set
			{
				if ((this._InternalBoxUuid != value))
				{
					this.OnInternalBoxUuidChanging(value);
					this.SendPropertyChanging();
					this._InternalBoxUuid = value;
					this.SendPropertyChanged("InternalBoxUuid");
					this.OnInternalBoxUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conatiner", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Conatiner
		{
			get
			{
				return this._Conatiner;
			}
			set
			{
				if ((this._Conatiner != value))
				{
					this.OnConatinerChanging(value);
					this.SendPropertyChanging();
					this._Conatiner = value;
					this.SendPropertyChanged("Conatiner");
					this.OnConatinerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mandatory", DbType="Bit NOT NULL")]
		public bool Mandatory
		{
			get
			{
				return this._Mandatory;
			}
			set
			{
				if ((this._Mandatory != value))
				{
					this.OnMandatoryChanging(value);
					this.SendPropertyChanging();
					this._Mandatory = value;
					this.SendPropertyChanged("Mandatory");
					this.OnMandatoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Quantity Minimum]", Storage="_QuantityMinimum", DbType="TinyInt")]
		public System.Nullable<byte> QuantityMinimum
		{
			get
			{
				return this._QuantityMinimum;
			}
			set
			{
				if ((this._QuantityMinimum != value))
				{
					this.OnQuantityMinimumChanging(value);
					this.SendPropertyChanging();
					this._QuantityMinimum = value;
					this.SendPropertyChanged("QuantityMinimum");
					this.OnQuantityMinimumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Quantity Maximum]", Storage="_QuantityMaximum", DbType="TinyInt")]
		public System.Nullable<byte> QuantityMaximum
		{
			get
			{
				return this._QuantityMaximum;
			}
			set
			{
				if ((this._QuantityMaximum != value))
				{
					this.OnQuantityMaximumChanging(value);
					this.SendPropertyChanging();
					this._QuantityMaximum = value;
					this.SendPropertyChanged("QuantityMaximum");
					this.OnQuantityMaximumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_BoxDefinition", Storage="_Box", ThisKey="InternalBoxUuid", OtherKey="InternalUuid", IsForeignKey=true)]
		public Box Box
		{
			get
			{
				return this._Box.Entity;
			}
			set
			{
				Box previousValue = this._Box.Entity;
				if (((previousValue != value) 
							|| (this._Box.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Box.Entity = null;
						previousValue.BoxDefinitions.Remove(this);
					}
					this._Box.Entity = value;
					if ((value != null))
					{
						value.BoxDefinitions.Add(this);
						this._InternalBoxUuid = value.InternalUuid;
					}
					else
					{
						this._InternalBoxUuid = default(System.Guid);
					}
					this.SendPropertyChanged("Box");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boxes")]
	public partial class Box : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InternalUuid;
		
		private EntitySet<BoxDefinition> _BoxDefinitions;
		
		private EntitySet<BoxUuid> _BoxUuids;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInternalUuidChanging(System.Guid value);
    partial void OnInternalUuidChanged();
    #endregion
		
		public Box()
		{
			this._BoxDefinitions = new EntitySet<BoxDefinition>(new Action<BoxDefinition>(this.attach_BoxDefinitions), new Action<BoxDefinition>(this.detach_BoxDefinitions));
			this._BoxUuids = new EntitySet<BoxUuid>(new Action<BoxUuid>(this.attach_BoxUuids), new Action<BoxUuid>(this.detach_BoxUuids));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Internal UUID]", Storage="_InternalUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InternalUuid
		{
			get
			{
				return this._InternalUuid;
			}
			set
			{
				if ((this._InternalUuid != value))
				{
					this.OnInternalUuidChanging(value);
					this.SendPropertyChanging();
					this._InternalUuid = value;
					this.SendPropertyChanged("InternalUuid");
					this.OnInternalUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_BoxDefinition", Storage="_BoxDefinitions", ThisKey="InternalUuid", OtherKey="InternalBoxUuid")]
		public EntitySet<BoxDefinition> BoxDefinitions
		{
			get
			{
				return this._BoxDefinitions;
			}
			set
			{
				this._BoxDefinitions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_BoxUuid", Storage="_BoxUuids", ThisKey="InternalUuid", OtherKey="InternalUuid")]
		public EntitySet<BoxUuid> BoxUuids
		{
			get
			{
				return this._BoxUuids;
			}
			set
			{
				this._BoxUuids.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BoxDefinitions(BoxDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Box = this;
		}
		
		private void detach_BoxDefinitions(BoxDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Box = null;
		}
		
		private void attach_BoxUuids(BoxUuid entity)
		{
			this.SendPropertyChanging();
			entity.Box = this;
		}
		
		private void detach_BoxUuids(BoxUuid entity)
		{
			this.SendPropertyChanging();
			entity.Box = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Box UUIDs]")]
	public partial class BoxUuid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Uuid;
		
		private System.Guid _InternalUuid;
		
		private EntityRef<Box> _Box;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUuidChanging(System.Guid value);
    partial void OnUuidChanged();
    partial void OnInternalUuidChanging(System.Guid value);
    partial void OnInternalUuidChanged();
    #endregion
		
		public BoxUuid()
		{
			this._Box = default(EntityRef<Box>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="UUID", Storage="_Uuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Uuid
		{
			get
			{
				return this._Uuid;
			}
			set
			{
				if ((this._Uuid != value))
				{
					this.OnUuidChanging(value);
					this.SendPropertyChanging();
					this._Uuid = value;
					this.SendPropertyChanged("Uuid");
					this.OnUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Internal UUID]", Storage="_InternalUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InternalUuid
		{
			get
			{
				return this._InternalUuid;
			}
			set
			{
				if ((this._InternalUuid != value))
				{
					this.OnInternalUuidChanging(value);
					this.SendPropertyChanging();
					this._InternalUuid = value;
					this.SendPropertyChanged("InternalUuid");
					this.OnInternalUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Box_BoxUuid", Storage="_Box", ThisKey="InternalUuid", OtherKey="InternalUuid", IsForeignKey=true)]
		public Box Box
		{
			get
			{
				return this._Box.Entity;
			}
			set
			{
				Box previousValue = this._Box.Entity;
				if (((previousValue != value) 
							|| (this._Box.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Box.Entity = null;
						previousValue.BoxUuids.Remove(this);
					}
					this._Box.Entity = value;
					if ((value != null))
					{
						value.BoxUuids.Add(this);
						this._InternalUuid = value.InternalUuid;
					}
					else
					{
						this._InternalUuid = default(System.Guid);
					}
					this.SendPropertyChanged("Box");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
